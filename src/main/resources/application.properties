spring.application.name=WebToonEpics
# my-sql
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/test?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true
spring.datasource.username=${my-sql.username}
spring.datasource.password=${my-sql.password}
# jpa
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
logging.level.org.hibernate.SQL=DEBUG
spring.jpa.properties.hibernate.format_sql=true
# google security
spring.security.oauth2.client.registration.google.client-id=${google.client-id}
spring.security.oauth2.client.registration.google.client-secret=${google.client-secret}
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.scope=email, profile
spring.security.oauth2.client.registration.google.client-name=Google
# kakao security
spring.security.oauth2.client.registration.kakao.client-id=${kakao.client-id}
spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:8080/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.client-name=Kakao
spring.security.oauth2.client.registration.kakao.scope=profile_nickname, profile_image, account_email
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-info-authentication-method=POST
spring.security.oauth2.client.provider.kakao.user-name-attribute=id
# spring-security
logging.level.org.springframework.security=debug
# Hibernate ddl
spring.jpa.generate-ddl=false
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
# password key save
spring.jwt.secret=${jwt.secret}
# security import
spring.profiles.include=SECRET-KEY
# redis
spring.data.redis.host=${redis.host}
spring.data.redis.port=6379
# Swagger
## swagger-ui 접근 경로. default 값은 /swagger-ui.html이다.
springdoc.swagger-ui.path=/swagger-ui.html
## 각 API의 그룹 표시 순서
### path, query, body, response 순으로 출력
springdoc.swagger-ui.groups-order=DESC
## 태그 정렬 순서.
### alpha: 알파벳 순 정렬
### method: OpenAPI specification file에 원하는 태그 정렬 방식 직접 기재
springdoc.swagger-ui.tags-sorter=alpha
## 컨트롤러 정렬 순서.
### method는 delete - get - patch - post - put 순으로 정렬된다.
### alpha를 사용해 알파벳 순으로 정렬할 수 있다.
springdoc.swagger-ui.operations-sorter=method
## swagger-ui default url인 petstore html의 비활성화 설정
springdoc.swagger-ui.disable-swagger-default-url=true
## swagger-ui에서 try 했을 때 request duration을 알려주는 설정
springdoc.swagger-ui.display-request-duration=true
## openAPI 접근 경로. default 값은 /v3/api-docs 이다.
springdoc.api-docs.path=/api-docs
## Spring Actuator의 endpoint까지 보여줄 것인지?
springdoc.show-actuator=true
## request media type 의 기본 값
springdoc.default-consumes-media-type=application/json
## response media type 의 기본 값
springdoc.default-produces-media-type=application/json
## 해당 패턴에 매칭되는 controller만 swagger-ui에 노출한다.
springdoc.paths-to-match=/api/v1/**
